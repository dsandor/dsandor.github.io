/**
 * Created by dsandor on 2/6/14.
 */
var blogApp = angular.module('blogApp', ['ngSanitize', 'infinite-scroll']);

blogApp.controller('BlogListCtrl', function($scope, $http, Blog){

    $scope.blog = new Blog();

    /*
    var pipeOutput = [
        {"count":10,"value":{"title":"dsfeed","description":"Pipes Output","link":"http:\/\/pipes.yahoo.com\/pipes\/pipe.info?_id=c8cc041f174d579bff14a338cfb0a458","pubDate":"Fri, 07 Feb 2014 03:21:37 +0000","generator":"http:\/\/pipes.yahoo.com\/pipes\/","callback":"","items":[{"title":"Caliburn.Micro how to set the MinHeight and MinWidth of the Root View \/ Window ( WPF )","description":"<p>This is pretty easy.&#160; Basically you can send any property values to the Window object that is being created to hold your root view.&#160; Simply create a <strong>Dictionary<<span class=\"kwrd\">string<\/span>, <span class=\"kwrd\">object<\/span>><\/strong> with the property name as the key.&#160; Pass that dictionary to the <strong>DisplayRootViewFor<>()<\/strong> method and viola!<\/p>  <pre class=\"csharpcode\"><span class=\"kwrd\">protected<\/span> <span class=\"kwrd\">override<\/span> <span class=\"kwrd\">void<\/span> OnStartup(<span class=\"kwrd\">object<\/span> sender, System.Windows.StartupEventArgs e)\n{\n    Dictionary<<span class=\"kwrd\">string<\/span>, <span class=\"kwrd\">object<\/span>> settings = <span class=\"kwrd\">new<\/span> Dictionary<<span class=\"kwrd\">string<\/span>, <span class=\"kwrd\">object<\/span>>();\n    settings.Add(<span class=\"str\">\"MinHeight\"<\/span>, 480);\n    settings.Add(<span class=\"str\">\"MinWidth\"<\/span>, 640);\n\n    DisplayRootViewFor<ShellViewModel>(settings);\n}<\/pre>\n<style type=\"text\/css\">\n.csharpcode, .csharpcode pre\n{\nfont-size:small;color:black;font-family:consolas, \"Courier New\", courier, monospace;background-color:#ffffff;}\n.csharpcode pre {margin:0em;}\n.csharpcode .rem {color:#008000;}\n.csharpcode .kwrd {color:#0000ff;}\n.csharpcode .str {color:#006080;}\n.csharpcode .op {color:#0000c0;}\n.csharpcode .preproc {color:#cc6633;}\n.csharpcode .asp {background-color:#ffff00;}\n.csharpcode .html {color:#800000;}\n.csharpcode .attr {color:#ff0000;}\n.csharpcode .alt \n{\nbackground-color:#f4f4f4;width:100%;margin:0em;}\n.csharpcode .lnum {color:#606060;}<\/style>","link":"http:\/\/davidsandor.com\/post\/2013\/07\/17\/CaliburnMicro-how-to-set-the-MinHeight-and-MinWidth-of-the-Root-View-Window-(-WPF-).aspx","comments":"http:\/\/davidsandor.com\/post\/2013\/07\/17\/CaliburnMicro-how-to-set-the-MinHeight-and-MinWidth-of-the-Root-View-Window-(-WPF-).aspx#comment","guid":"http:\/\/davidsandor.com\/post.aspx?id=9a7fc24f-1f44-4f8b-b0d4-1034b17691e4","pubDate":"Wed, 17 Jul 2013 18:11:04 -0800","category":["C#","Programming","WPF"],"dc:publisher":"admin","pingback:server":"http:\/\/davidsandor.com\/pingback.axd","pingback:target":"http:\/\/davidsandor.com\/post.aspx?id=9a7fc24f-1f44-4f8b-b0d4-1034b17691e4","slash:comments":"64","trackback:ping":"http:\/\/davidsandor.com\/trackback.axd?id=9a7fc24f-1f44-4f8b-b0d4-1034b17691e4","wfw:comment":"http:\/\/davidsandor.com\/post\/2013\/07\/17\/CaliburnMicro-how-to-set-the-MinHeight-and-MinWidth-of-the-Root-View-Window-(-WPF-).aspx#comment","wfw:commentRss":"http:\/\/davidsandor.com\/syndication.axd?post=9a7fc24f-1f44-4f8b-b0d4-1034b17691e4","y:published":{"hour":"2","timezone":"UTC","second":"4","month":"7","month_name":"July","minute":"11","utime":"1374113464","day":"18","day_ordinal_suffix":"th","day_of_week":"4","day_name":"Thursday","year":"2013"},"y:id":{"permalink":"false","value":"http:\/\/davidsandor.com\/post.aspx?id=9a7fc24f-1f44-4f8b-b0d4-1034b17691e4"},"y:title":"Caliburn.Micro how to set the MinHeight and MinWidth of the Root View \/ Window ( WPF )"},{"title":"Using Caliburn Micro with WPF Frame for navigation.","description":"<p>I have an application that uses the WPF frame for navigation.&#160; The frame markup looks like this:<\/p>  <pre class=\"csharpcode\"><span class=\"kwrd\"><<\/span><span class=\"html\">Frame<\/span> <span class=\"attr\">x:Name<\/span><span class=\"kwrd\">=\"ActiveItem\"<\/span>\n            <span class=\"attr\">Source<\/span><span class=\"kwrd\">=\"{Binding FrameSource}\"<\/span> <span class=\"attr\">MinHeight<\/span><span class=\"kwrd\">=\"400\"<\/span> <span class=\"attr\">MinWidth<\/span><span class=\"kwrd\">=\"600\"<\/span>\n            <span class=\"attr\">VerticalAlignment<\/span><span class=\"kwrd\">=\"Stretch\"<\/span> <span class=\"attr\">HorizontalContentAlignment<\/span><span class=\"kwrd\">=\"Stretch\"<\/span> \n            <span class=\"attr\">VerticalContentAlignment<\/span><span class=\"kwrd\">=\"Stretch\"<\/span>\n            <span class=\"attr\">HorizontalAlignment<\/span><span class=\"kwrd\">=\"Stretch\"<\/span> <span class=\"attr\">Background<\/span><span class=\"kwrd\">=\"White\"<\/span>\n            <span class=\"kwrd\">\/><\/span><\/pre>\n\n<p>This Frame tag is located in my <strong>ShellView.xaml<\/strong> file and this takes the place of a <strong>ContentPlaceholder<\/strong>.&#160; In order to navigate to another page I simply call<font color=\"#0000ff\"> ActivateItem( viewModelInstance )<\/font> from my <strong>ShellViewModel<\/strong>.&#160; Because the ShellViewModel orchestrates the page loads I created a simple ChangeViewMessage class to throw via the <strong>EventAggregator<\/strong>.&#160; My ShellViewModel handles this message and passes the viewModel instance to the ActivateItem method.&#160; Caliburn Micro takes care of everything else.<\/p>\n\n<p>Here is an example of the ShellViewModel loading my initial page\/view in the constructor.<\/p>\n\n<pre class=\"csharpcode\"><span class=\"kwrd\">class<\/span> ShellViewModel : Conductor<<span class=\"kwrd\">object<\/span>>, IHandle<ChangeViewMessage>, IHandle<OpenWindowMessage>\n    {\n        IEventAggregator EventAggregator;\n        IWindowManager WindowManager;\n\n        <span class=\"kwrd\">public<\/span> ShellViewModel(IEventAggregator eventAggregator, SimpleContainer container, <br \/>         IWindowManager windowManager)\n        {\n            <span class=\"kwrd\">this<\/span>.StepNumber = 1;\n            <span class=\"kwrd\">this<\/span>.EventAggregator = eventAggregator;\n            <span class=\"kwrd\">this<\/span>.WindowManager = windowManager;\n\n            var selectServersViewModel = (SelectServersViewModel)container.GetInstance(<br \/>                    <span class=\"kwrd\">typeof<\/span>(IViewModel), <span class=\"str\">\"SelectServersViewModel\"<\/span>);\n            ActivateItem(selectServersViewModel);\n            <span class=\"kwrd\">this<\/span>.DisplayName = <span class=\"str\">\"Simple SQL Compare\"<\/span>;\n\n            <span class=\"kwrd\">this<\/span>.EventAggregator.Subscribe(<span class=\"kwrd\">this<\/span>);\n        }<\/pre>\n<style type=\"text\/css\">\n.csharpcode, .csharpcode pre\n{\nfont-size:small;color:black;font-family:consolas, \"Courier New\", courier, monospace;background-color:#ffffff;}\n.csharpcode pre {margin:0em;}\n.csharpcode .rem {color:#008000;}\n.csharpcode .kwrd {color:#0000ff;}\n.csharpcode .str {color:#006080;}\n.csharpcode .op {color:#0000c0;}\n.csharpcode .preproc {color:#cc6633;}\n.csharpcode .asp {background-color:#ffff00;}\n.csharpcode .html {color:#800000;}\n.csharpcode .attr {color:#ff0000;}\n.csharpcode .alt \n{\nbackground-color:#f4f4f4;width:100%;margin:0em;}\n.csharpcode .lnum {color:#606060;}<\/style>\n\n<p>You can see that my first view (SelectServersView via the ViewModel) is loaded there.<\/p>\n\n<p>In order to make Caliburn Micro work you have to patch one method to be 'Frame Aware'.<\/p>\n\n<p>In the <strong>View.cs<\/strong> class of the Caliburn Micro source in the <strong>Caliburn.Micro.WPF<\/strong> project change the <strong>SetContentPropertyCore<\/strong> method to look like the one below.&#160; This allows you to use a Frame.<\/p>\n\n<pre class=\"csharpcode\"><span class=\"kwrd\">static<\/span> <span class=\"kwrd\">void<\/span> SetContentPropertyCore(<span class=\"kwrd\">object<\/span> targetLocation, <span class=\"kwrd\">object<\/span> view) {\n    <span class=\"kwrd\">try<\/span> {\n        var type = targetLocation.GetType();\n        var contentProperty = type.GetAttributes<ContentPropertyAttribute>(<span class=\"kwrd\">true<\/span>)\n                                  .FirstOrDefault() ?? DefaultContentProperty;\n\n        <span class=\"kwrd\">if<\/span> (contentProperty.Name == <span class=\"kwrd\">null<\/span> && type == <span class=\"kwrd\">typeof<\/span>(Frame))\n        {\n            type.GetMethod(<span class=\"str\">\"Navigate\"<\/span>, <span class=\"kwrd\">new<\/span> Type[] { <span class=\"kwrd\">typeof<\/span>(<span class=\"kwrd\">object<\/span>) })<br \/>                .Invoke(targetLocation, <span class=\"kwrd\">new<\/span> <span class=\"kwrd\">object<\/span>[] { view });\n        }\n        <span class=\"kwrd\">else<\/span>\n        {\n            type.GetProperty(contentProperty.Name)\n                .SetValue(targetLocation, view, <span class=\"kwrd\">null<\/span>);\n        }\n    }\n    <span class=\"kwrd\">catch<\/span>(Exception e) {\n        Log.Error(e);\n    }\n}<\/pre>\n<style type=\"text\/css\">\n.csharpcode, .csharpcode pre\n{\nfont-size:small;color:black;font-family:consolas, \"Courier New\", courier, monospace;background-color:#ffffff;}\n.csharpcode pre {margin:0em;}\n.csharpcode .rem {color:#008000;}\n.csharpcode .kwrd {color:#0000ff;}\n.csharpcode .str {color:#006080;}\n.csharpcode .op {color:#0000c0;}\n.csharpcode .preproc {color:#cc6633;}\n.csharpcode .asp {background-color:#ffff00;}\n.csharpcode .html {color:#800000;}\n.csharpcode .attr {color:#ff0000;}\n.csharpcode .alt \n{\nbackground-color:#f4f4f4;width:100%;margin:0em;}\n.csharpcode .lnum {color:#606060;}<\/style>\n\n<p>&#160;<\/p>\n\n<p>&#160;<\/p>\n\n<p>&#160;<\/p>\n\n<p>\n  <br \/><\/p>\n<style type=\"text\/css\">\n\n.csharpcode, .csharpcode pre\n{\nfont-size:small;color:black;font-family:consolas, \"Courier New\", courier, monospace;background-color:#ffffff;}\n.csharpcode pre {margin:0em;}\n.csharpcode .rem {color:#008000;}\n.csharpcode .kwrd {color:#0000ff;}\n.csharpcode .str {color:#006080;}\n.csharpcode .op {color:#0000c0;}\n.csharpcode .preproc {color:#cc6633;}\n.csharpcode .asp {background-color:#ffff00;}\n.csharpcode .html {color:#800000;}\n.csharpcode .attr {color:#ff0000;}\n.csharpcode .alt \n{\nbackground-color:#f4f4f4;width:100%;margin:0em;}\n.csharpcode .lnum {color:#606060;}<\/style>","link":"http:\/\/davidsandor.com\/post\/2013\/07\/17\/Using-Caliburn-Micro-with-WPF-Frame-for-navigation.aspx","comments":"http:\/\/davidsandor.com\/post\/2013\/07\/17\/Using-Caliburn-Micro-with-WPF-Frame-for-navigation.aspx#comment","guid":"http:\/\/davidsandor.com\/post.aspx?id=4ad82dd1-2e6e-41a8-b600-0c35afe298ba","pubDate":"Wed, 17 Jul 2013 18:06:22 -0800","category":[".NET 4.5","C#","Programming","Visual Studio 2012","WPF","XAML"],"dc:publisher":"admin","pingback:server":"http:\/\/davidsandor.com\/pingback.axd","pingback:target":"http:\/\/davidsandor.com\/post.aspx?id=4ad82dd1-2e6e-41a8-b600-0c35afe298ba","slash:comments":"12","trackback:ping":"http:\/\/davidsandor.com\/trackback.axd?id=4ad82dd1-2e6e-41a8-b600-0c35afe298ba","wfw:comment":"http:\/\/davidsandor.com\/post\/2013\/07\/17\/Using-Caliburn-Micro-with-WPF-Frame-for-navigation.aspx#comment","wfw:commentRss":"http:\/\/davidsandor.com\/syndication.axd?post=4ad82dd1-2e6e-41a8-b600-0c35afe298ba","y:published":{"hour":"2","timezone":"UTC","second":"22","month":"7","month_name":"July","minute":"6","utime":"1374113182","day":"18","day_ordinal_suffix":"th","day_of_week":"4","day_name":"Thursday","year":"2013"},"y:id":{"permalink":"false","value":"http:\/\/davidsandor.com\/post.aspx?id=4ad82dd1-2e6e-41a8-b600-0c35afe298ba"},"y:title":"Using Caliburn Micro with WPF Frame for navigation."},{"title":"Git provider for Visual Studio integrates seamlessly into Visual Studio 2012 and allows GitHub access.","description":"<p>There are a few Git providers floating around and I found the one here to be the best.&#160; The reason is that it uses the familiar Team System UI elements to control source which is very nice.<\/p>  <p><a rel=\"nofollow\" title=\"http:\/\/visualstudiogallery.msdn.microsoft.com\/abafc7d6-dcaa-40f4-8a5e-d6724bdb980c\" target=\"_blank\" href=\"http:\/\/visualstudiogallery.msdn.microsoft.com\/abafc7d6-dcaa-40f4-8a5e-d6724bdb980c\">http:\/\/visualstudiogallery.msdn.microsoft.com\/abafc7d6-dcaa-40f4-8a5e-d6724bdb980c<\/a><\/p>  <p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_159.png\"><img title=\"image\" style=\"border-top:0px;border-right:0px;background-image:none;border-bottom:0px;padding-top:0px;padding-left:0px;border-left:0px;display:inline;padding-right:0px;\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_159.png\" width=\"587\" height=\"342\"\/><\/a><\/p>","link":"http:\/\/davidsandor.com\/post\/2013\/06\/29\/Git-provider-for-Visual-Studio-integrates-seamlessly-into-Visual-Studio-2012-and-allows-GitHub-access.aspx","comments":"http:\/\/davidsandor.com\/post\/2013\/06\/29\/Git-provider-for-Visual-Studio-integrates-seamlessly-into-Visual-Studio-2012-and-allows-GitHub-access.aspx#comment","guid":"http:\/\/davidsandor.com\/post.aspx?id=7ac74420-c9fe-4e40-836e-e8094e68be49","pubDate":"Sat, 29 Jun 2013 05:42:22 -0800","category":["Programming","Visual Studio 2012"],"dc:publisher":"admin","pingback:server":"http:\/\/davidsandor.com\/pingback.axd","pingback:target":"http:\/\/davidsandor.com\/post.aspx?id=7ac74420-c9fe-4e40-836e-e8094e68be49","slash:comments":"27","trackback:ping":"http:\/\/davidsandor.com\/trackback.axd?id=7ac74420-c9fe-4e40-836e-e8094e68be49","wfw:comment":"http:\/\/davidsandor.com\/post\/2013\/06\/29\/Git-provider-for-Visual-Studio-integrates-seamlessly-into-Visual-Studio-2012-and-allows-GitHub-access.aspx#comment","wfw:commentRss":"http:\/\/davidsandor.com\/syndication.axd?post=7ac74420-c9fe-4e40-836e-e8094e68be49","y:published":{"hour":"13","timezone":"UTC","second":"22","month":"6","month_name":"June","minute":"42","utime":"1372513342","day":"29","day_ordinal_suffix":"th","day_of_week":"6","day_name":"Saturday","year":"2013"},"y:id":{"permalink":"false","value":"http:\/\/davidsandor.com\/post.aspx?id=7ac74420-c9fe-4e40-836e-e8094e68be49"},"y:title":"Git provider for Visual Studio integrates seamlessly into Visual Studio 2012 and allows GitHub access."},{"title":"Web Api Client for Xamarin MonoTouch \/ iTouch \/ iPhone \/ iPad \/ iOS","description":"<p>Just posted the code that I am using for an iOS project of mine that handles all the Web Api calls. &nbsp;<\/p>\n<p>https:\/\/github.com\/dsandor\/WebApiClient\/tree\/master\/src\/Monotouch<\/p>\n<p><strong>Example of use:<\/strong><\/p>\n<p><span style=\"font-family:Menlo;\"><span style=\"background-color:#ffff99;\"><span style=\"color:#3364a4;\">WebApiClient<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">Post<\/span><span style=\"color:#444444;\"><<\/span><span style=\"color:#3364a4;\">ServiceResponse<\/span><span style=\"color:#444444;\"><<\/span><span style=\"color:#3364a4;\">User<\/span><span style=\"color:#444444;\">><\/span><span style=\"color:#444444;\">><\/span><span style=\"color:#444444;\">(<\/span><span style=\"color:#009695;\">string<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">Format<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">(<\/span><span style=\"color:#f57d00;\">\"<\/span><span style=\"color:#f57d00;\">{0}Auth\/Login?emailAddress={1}&password={2}<\/span><span style=\"color:#f57d00;\">\"<\/span><\/span><br \/><span style=\"background-color:#ffff99;\"> <span style=\"color:#444444;\">&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">,<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#3364a4;\">AppDelegate<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">Current<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">ApiBase<\/span><span style=\"color:#444444;\">,<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">email<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">Value<\/span><span style=\"color:#444444;\">,<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">password<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">Value<\/span><span style=\"color:#444444;\">)<\/span><span style=\"color:#444444;\">,<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#f57d00;\">\"<\/span><span style=\"color:#f57d00;\">\"<\/span><span style=\"color:#444444;\">,<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#f57d00;\">\"<\/span><span style=\"color:#f57d00;\">\"<\/span><\/span><span style=\"color:#444444;\"><span style=\"background-color:#ffff99;\">)<\/span><br \/><\/span><\/span><span style=\"font-family:Menlo;color:#444444;\"><span style=\"white-space:pre;\"> <\/span>.<\/span><span style=\"font-family:Menlo;color:#444444;\">ContinueWith<\/span><span style=\"font-family:Menlo;color:#444444;\">&nbsp;<\/span><span style=\"font-family:Menlo;color:#444444;\">(<\/span><span style=\"font-family:Menlo;color:#444444;\">&nbsp;<\/span><span style=\"font-family:Menlo;color:#444444;\">(<\/span><span style=\"font-family:Menlo;color:#444444;\">t<\/span><span style=\"font-family:Menlo;color:#444444;\">)<\/span><span style=\"font-family:Menlo;color:#444444;\">&nbsp;<\/span><span style=\"font-family:Menlo;color:#444444;\">=<\/span><span style=\"font-family:Menlo;color:#444444;\">><\/span><\/p>\n<p><span style=\"font-family:Menlo;\"> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">{<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#009695;\">this<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">InvokeOnMainThread<\/span><span style=\"color:#444444;\">(<\/span><span style=\"color:#444444;\">(<\/span><span style=\"color:#444444;\">)<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">=<\/span><span style=\"color:#444444;\">><\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">{<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">loadingView<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">Hide<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">(<\/span><span style=\"color:#444444;\">)<\/span><span style=\"color:#444444;\">;<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">}<\/span><span style=\"color:#444444;\">)<\/span><span style=\"color:#444444;\">;<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#009695;\">var<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">result<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">=<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">t<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">Result<\/span><span style=\"color:#444444;\">;<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#009695;\">if<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">(<\/span><span style=\"color:#444444;\">result<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">!<\/span><span style=\"color:#444444;\">=<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#009695;\">null<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">&<\/span><span style=\"color:#444444;\">&<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">result<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">IsSuccess<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">&<\/span><span style=\"color:#444444;\">&<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">result<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">Payload<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">!<\/span><span style=\"color:#444444;\">=<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#009695;\">null<\/span><span style=\"color:#444444;\">)<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">{<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#009695;\">this<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">InvokeOnMainThread<\/span><span style=\"color:#444444;\">(<\/span><span style=\"color:#444444;\">(<\/span><span style=\"color:#444444;\">)<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">=<\/span><span style=\"color:#444444;\">><\/span><span style=\"color:#444444;\">&nbsp;<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">{<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;<\/span><span style=\"color:#3364a4;\">AppDelegate<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">Current<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">UserInfo<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">=<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">result<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">Payload<\/span><span style=\"color:#444444;\">;<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">MoveToHomeView<\/span><span style=\"color:#444444;\">(<\/span><span style=\"color:#444444;\">)<\/span><span style=\"color:#444444;\">;<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">}<\/span><span style=\"color:#444444;\">)<\/span><span style=\"color:#444444;\">;<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">}<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#009695;\">else<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">{<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#009695;\">this<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">InvokeOnMainThread<\/span><span style=\"color:#444444;\">(<\/span><span style=\"color:#444444;\">(<\/span><span style=\"color:#444444;\">)<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">=<\/span><span style=\"color:#444444;\">><\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">{<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#009695;\">new<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#3364a4;\">UIAlertView<\/span><span style=\"color:#444444;\">(<\/span><span style=\"color:#f57d00;\">\"<\/span><span style=\"color:#f57d00;\">Invalid&nbsp;login<\/span><span style=\"color:#f57d00;\">\"<\/span><span style=\"color:#444444;\">,<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#f57d00;\">\"<\/span><span style=\"color:#f57d00;\">Invalid&nbsp;username&nbsp;or&nbsp;password.<\/span><span style=\"color:#f57d00;\">\"<\/span><span style=\"color:#444444;\">,<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#009695;\">null<\/span><span style=\"color:#444444;\">,<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#f57d00;\">\"<\/span><span style=\"color:#f57d00;\">OK<\/span><span style=\"color:#f57d00;\">\"<\/span><span style=\"color:#444444;\">)<\/span><span style=\"color:#444444;\">.<\/span><span style=\"color:#444444;\">Show<\/span><span style=\"color:#444444;\">(<\/span><span style=\"color:#444444;\">)<\/span><span style=\"color:#444444;\">;<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">}<\/span><span style=\"color:#444444;\">)<\/span><span style=\"color:#444444;\">;<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">}<\/span><br \/> <span style=\"color:#444444;\">&nbsp;&nbsp;&nbsp;&nbsp;<\/span><span style=\"color:#444444;\">&nbsp;<\/span><span style=\"color:#444444;\">}<\/span><span style=\"color:#444444;\">)<\/span><span style=\"color:#444444;\">;<\/span><\/span><\/p>","link":"http:\/\/davidsandor.com\/post\/2013\/06\/14\/Web-Api-Client-for-Xamarin-MonoTouch-iTouch-iPhone-iPad-iOS.aspx","comments":"http:\/\/davidsandor.com\/post\/2013\/06\/14\/Web-Api-Client-for-Xamarin-MonoTouch-iTouch-iPhone-iPad-iOS.aspx#comment","guid":"http:\/\/davidsandor.com\/post.aspx?id=cbb683f6-1970-4aec-b7f3-27d0ae40a8fa","pubDate":"Fri, 14 Jun 2013 19:45:00 -0800","category":["C#","iPhone","Mono","MonoTouch","Programming","Web Api"],"dc:publisher":"dsandor","pingback:server":"http:\/\/davidsandor.com\/pingback.axd","pingback:target":"http:\/\/davidsandor.com\/post.aspx?id=cbb683f6-1970-4aec-b7f3-27d0ae40a8fa","slash:comments":"220","trackback:ping":"http:\/\/davidsandor.com\/trackback.axd?id=cbb683f6-1970-4aec-b7f3-27d0ae40a8fa","wfw:comment":"http:\/\/davidsandor.com\/post\/2013\/06\/14\/Web-Api-Client-for-Xamarin-MonoTouch-iTouch-iPhone-iPad-iOS.aspx#comment","wfw:commentRss":"http:\/\/davidsandor.com\/syndication.axd?post=cbb683f6-1970-4aec-b7f3-27d0ae40a8fa","y:published":{"hour":"3","timezone":"UTC","second":"0","month":"6","month_name":"June","minute":"45","utime":"1371267900","day":"15","day_ordinal_suffix":"th","day_of_week":"6","day_name":"Saturday","year":"2013"},"y:id":{"permalink":"false","value":"http:\/\/davidsandor.com\/post.aspx?id=cbb683f6-1970-4aec-b7f3-27d0ae40a8fa"},"y:title":"Web Api Client for Xamarin MonoTouch \/ iTouch \/ iPhone \/ iPad \/ iOS"},{"title":"Simple class for consuming WebApi via Windows Phone 8","description":"<p>I wrote a simple generic method for making POST calls to MVC4 WebApi for use on Windows Phone 8 (But you can use it elsewhere).&#160; The idea is simple: Create one set of generic methods that will take a generic TResultType, an Api Uri, and optionally some data to post and return back a strongly typed response object.   <br \/>    <br \/>Usage is simple:     <br \/>    <pre class=\"csharpcode\">var result = await client.Post<ServiceResponse<User>>\n(<span class=\"str\">\"http:\/\/localhost:8080\/api\/Auth?emailAddress=test@test.com&password=pass\"<\/span>, <span class=\"str\">\"token\"<\/span>, <span class=\"str\">\"\"<\/span>);<\/pre>\n  <style type=\"text\/css\">\n.csharpcode, .csharpcode pre\n{\nfont-size:small;color:black;font-family:consolas, \"Courier New\", courier, monospace;background-color:#ffffff;}\n.csharpcode pre {margin:0em;}\n.csharpcode .rem {color:#008000;}\n.csharpcode .kwrd {color:#0000ff;}\n.csharpcode .str {color:#006080;}\n.csharpcode .op {color:#0000c0;}\n.csharpcode .preproc {color:#cc6633;}\n.csharpcode .asp {background-color:#ffff00;}\n.csharpcode .html {color:#800000;}\n.csharpcode .attr {color:#ff0000;}\n.csharpcode .alt \n{\nbackground-color:#f4f4f4;width:100%;margin:0em;}\n.csharpcode .lnum {color:#606060;}<\/style><\/p>\n\n<p>This allows you to simply use await to make your MVC4 WebApi calls and get back strongly typed objects.&#160; The <strong>Post<\/strong> code uses <a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/james.newtonking.com\/pages\/json-net.aspx\">Newtonsoft Json<\/a> library to deserialize the response string as an object.<\/p>\n\n<p>I will package this up as a simple GIT project when I have time and create a nuget package so that everyone can use this simply.<\/p>\n\n<pre class=\"csharpcode\"><span class=\"kwrd\">public<\/span> async Task<TReturnType> Post<TReturnType>\n(<span class=\"kwrd\">string<\/span> apiUrl, Dictionary<<span class=\"kwrd\">string<\/span>,<span class=\"kwrd\">string<\/span>> headers, <span class=\"kwrd\">string<\/span> data)\n{\n    var webClient = <span class=\"kwrd\">new<\/span> WebClient();\n    var uri       = <span class=\"kwrd\">new<\/span> Uri(apiUrl);\n\n    <span class=\"kwrd\">if<\/span> (headers != <span class=\"kwrd\">null<\/span>)\n    {\n        <span class=\"kwrd\">foreach<\/span> (var key <span class=\"kwrd\">in<\/span> headers.Keys)\n        {\n            webClient.Headers[key] = headers[key];\n        }\n    }\n\n    <span class=\"kwrd\">return<\/span> await Post<TReturnType>(webClient, uri, data);\n}\n\n<span class=\"kwrd\">private<\/span> Task<TReturnType> Post<TReturnType>(WebClient webClient, Uri uri, <span class=\"kwrd\">string<\/span> data)\n{\n    TReturnType returnObject = <span class=\"kwrd\">default<\/span>(TReturnType);\n\n    var taskCompletionSource = <span class=\"kwrd\">new<\/span> TaskCompletionSource<TReturnType>();\n\n    webClient.Headers[<span class=\"str\">\"Content-Type\"<\/span>] = <span class=\"str\">\"application\/json\"<\/span>;\n\n    webClient.UploadStringCompleted += (s, e) =>\n    {\n        var result = e.Result;\n\n        <span class=\"kwrd\">try<\/span>\n        {\n            returnObject = JsonConvert.DeserializeObject<TReturnType>(result);\n\n            taskCompletionSource.SetResult(returnObject);\n        }\n        <span class=\"kwrd\">catch<\/span> (Exception ex)\n        {\n            var newEx = <span class=\"kwrd\">new<\/span> Exception(\n              <span class=\"kwrd\">string<\/span>.Format(<span class=\"str\">\"Failed to deserialize server response: {0}\"<\/span>, result), ex);\n            taskCompletionSource.SetException(newEx);\n        }\n    };\n\n    webClient.UploadStringAsync(uri, data);\n\n    <span class=\"kwrd\">return<\/span> taskCompletionSource.Task;\n}<\/pre>\n<style type=\"text\/css\">\n.csharpcode, .csharpcode pre\n{\nfont-size:small;color:black;font-family:consolas, \"Courier New\", courier, monospace;background-color:#ffffff;}\n.csharpcode pre {margin:0em;}\n.csharpcode .rem {color:#008000;}\n.csharpcode .kwrd {color:#0000ff;}\n.csharpcode .str {color:#006080;}\n.csharpcode .op {color:#0000c0;}\n.csharpcode .preproc {color:#cc6633;}\n.csharpcode .asp {background-color:#ffff00;}\n.csharpcode .html {color:#800000;}\n.csharpcode .attr {color:#ff0000;}\n.csharpcode .alt \n{\nbackground-color:#f4f4f4;width:100%;margin:0em;}\n.csharpcode .lnum {color:#606060;}<\/style>","link":"http:\/\/davidsandor.com\/post\/2013\/05\/05\/Simple-class-for-consuming-WebApi-via-Windows-Phone-8.aspx","comments":"http:\/\/davidsandor.com\/post\/2013\/05\/05\/Simple-class-for-consuming-WebApi-via-Windows-Phone-8.aspx#comment","guid":"http:\/\/davidsandor.com\/post.aspx?id=900f5232-73fc-4ca6-8f68-79be168c45f3","pubDate":"Sun, 05 May 2013 08:43:17 -0800","category":[".NET 4.5","C#","Windows Phone 8","Programming"],"dc:publisher":"admin","pingback:server":"http:\/\/davidsandor.com\/pingback.axd","pingback:target":"http:\/\/davidsandor.com\/post.aspx?id=900f5232-73fc-4ca6-8f68-79be168c45f3","slash:comments":"79","trackback:ping":"http:\/\/davidsandor.com\/trackback.axd?id=900f5232-73fc-4ca6-8f68-79be168c45f3","wfw:comment":"http:\/\/davidsandor.com\/post\/2013\/05\/05\/Simple-class-for-consuming-WebApi-via-Windows-Phone-8.aspx#comment","wfw:commentRss":"http:\/\/davidsandor.com\/syndication.axd?post=900f5232-73fc-4ca6-8f68-79be168c45f3","y:published":{"hour":"16","timezone":"UTC","second":"17","month":"5","month_name":"May","minute":"43","utime":"1367772197","day":"5","day_ordinal_suffix":"th","day_of_week":"0","day_name":"Sunday","year":"2013"},"y:id":{"permalink":"false","value":"http:\/\/davidsandor.com\/post.aspx?id=900f5232-73fc-4ca6-8f68-79be168c45f3"},"y:title":"Simple class for consuming WebApi via Windows Phone 8"},{"title":"SkyDrive API Helper for Windows Phone 8","description":"<p>While building a small application for viewing passwords (basically pwsafe for Windows Phone 8) I realized that because of the restrictions of WP8 with regard to the file system I needed a way to pull password files from a remote storage.&nbsp; As it turns out, the SkyDrive API is comprehensive but did not have a concise Windows Phone 8 API so I started building one.<\/p> <p><a rel=\"nofollow\" title=\"https:\/\/github.com\/dsandor\/SkydriveHelper\" target=\"_blank\" href=\"https:\/\/github.com\/dsandor\/SkydriveHelper\">https:\/\/github.com\/dsandor\/SkydriveHelper<\/a><\/p> <p>The code is very basic at this point but I do intend on improving it. <\/p> <p>With the API helper you can:<\/p><pre class=\"csharpcode\"><span class=\"kwrd\">public<\/span> async Task<LiveUserInfo> GetLiveUserInfo()\n\n<span class=\"kwrd\">public<\/span> async Task<List<DirectoryEntry>> GetDirectoryEntries(<span class=\"kwrd\">string<\/span> path)\n\n<span class=\"kwrd\">public<\/span> async Task<DirectoryEntry> GetDirectoryEntry(<span class=\"kwrd\">string<\/span> id)\n\n<span class=\"kwrd\">public<\/span> async Task<Stream> DownloadFile(<span class=\"kwrd\">string<\/span> id)\n\n<span class=\"kwrd\">public<\/span> async <span class=\"kwrd\">void<\/span> DownloadFile(<span class=\"kwrd\">string<\/span> id, <span class=\"kwrd\">string<\/span> fileLocation)\n<\/pre>\n<p>These commands will allow you to do the majority of what you need (except upload).<\/p>\n<p>To use it, simply place a SignInButton found in the Microsoft.Live.Controls assembly for Windows Phone 8.&nbsp; On the OnSessionChanged event simply pass the Session to the helper and it is ready to go.<\/p>\n<p>There is a very simple sample application included in the source tree that will let you get the directories from the skydrive and download a file.<\/p><pre class=\"csharpcode\">&nbsp;<\/pre>\n<style type=\"text\/css\">.csharpcode, .csharpcode pre\n{\nfont-size:small;color:black;font-family:consolas, \"Courier New\", courier, monospace;background-color:#ffffff;}\n.csharpcode pre {margin:0em;}\n.csharpcode .rem {color:#008000;}\n.csharpcode .kwrd {color:#0000ff;}\n.csharpcode .str {color:#006080;}\n.csharpcode .op {color:#0000c0;}\n.csharpcode .preproc {color:#cc6633;}\n.csharpcode .asp {background-color:#ffff00;}\n.csharpcode .html {color:#800000;}\n.csharpcode .attr {color:#ff0000;}\n.csharpcode .alt \n{\nbackground-color:#f4f4f4;width:100%;margin:0em;}\n.csharpcode .lnum {color:#606060;}\n<\/style>","link":"http:\/\/davidsandor.com\/post\/2013\/01\/21\/SkyDrive-API-Helper-for-Windows-Phone-8.aspx","comments":"http:\/\/davidsandor.com\/post\/2013\/01\/21\/SkyDrive-API-Helper-for-Windows-Phone-8.aspx#comment","guid":"http:\/\/davidsandor.com\/post.aspx?id=e24f5a2d-67db-4ad2-9200-c0d488f29d6e","pubDate":"Mon, 21 Jan 2013 07:27:00 -0800","category":["Windows Phone 8","Visual Studio 2012","Programming"],"dc:publisher":"admin","pingback:server":"http:\/\/davidsandor.com\/pingback.axd","pingback:target":"http:\/\/davidsandor.com\/post.aspx?id=e24f5a2d-67db-4ad2-9200-c0d488f29d6e","slash:comments":"84","trackback:ping":"http:\/\/davidsandor.com\/trackback.axd?id=e24f5a2d-67db-4ad2-9200-c0d488f29d6e","wfw:comment":"http:\/\/davidsandor.com\/post\/2013\/01\/21\/SkyDrive-API-Helper-for-Windows-Phone-8.aspx#comment","wfw:commentRss":"http:\/\/davidsandor.com\/syndication.axd?post=e24f5a2d-67db-4ad2-9200-c0d488f29d6e","y:published":{"hour":"15","timezone":"UTC","second":"0","month":"1","month_name":"January","minute":"27","utime":"1358782020","day":"21","day_ordinal_suffix":"st","day_of_week":"1","day_name":"Monday","year":"2013"},"y:id":{"permalink":"false","value":"http:\/\/davidsandor.com\/post.aspx?id=e24f5a2d-67db-4ad2-9200-c0d488f29d6e"},"y:title":"SkyDrive API Helper for Windows Phone 8"},{"title":"SOLVED: Windows Phone 8, WP8 - The 'await' operator can only be used within an async method.","description":"<p><font size=\"2\">This is a pretty rookie mistake with .NET 4.5 and the new async \/ await operators.&#160; While searching for the answer I found a lot of noise and no valuable answers so I thought I would notate the solution on my blog.<\/font><\/p>  <p><font size=\"2\">The short answer is that any method that uses await must itself be marked with async.<\/font><\/p>  <p><font size=\"2\">Take this code for example:<\/font><\/p>  <pre class=\"csharpcode\"><span class=\"kwrd\">private<\/span> <span class=\"kwrd\">void<\/span> OnUnlockCommand(<span class=\"kwrd\">object<\/span> parameter)\n{\n   StorageFile file = <font color=\"#0000ff\">await<\/font> Windows.Storage.ApplicationData.\n   Current.TemporaryFolder.CreateFileAsync(<span class=\"str\">\"filename\"<\/span>, CreationCollisionOption.ReplaceExisting);\n}<\/pre>\n\n<pre class=\"csharpcode\"><font face=\"Calibri\">The code above will fail with the error message:<\/font><\/pre>\n\n<p><font style=\"background-color:#ffff00;\"><\/font><font style=\"\" color=\"#c0504d\">Error&#160;&#160;&#160; 2&#160;&#160;&#160; The 'await' operator can only be used within an async method. Consider marking this method with the 'async' modifier and changing its return type to 'Task'.<\/font>&#160;<\/p>\n\n<pre class=\"csharpcode\"><font face=\"Calibri\">To solve this you must add async to the method declaration like below:<\/font><\/pre>\n\n<pre class=\"csharpcode\"><span class=\"kwrd\">private async<\/span> <span class=\"kwrd\">void<\/span> OnUnlockCommand(<span class=\"kwrd\">object<\/span> parameter) <br \/>{ <br \/>  StorageFile file = <font color=\"#0000ff\">await<\/font> Windows.Storage.ApplicationData.<br \/>   Current.TemporaryFolder.CreateFileAsync(<span class=\"str\">\"filename\"<\/span>, CreationCollisionOption.ReplaceExisting); <br \/>}<\/pre>\n<style type=\"text\/css\">\n.csharpcode, .csharpcode pre\n{\nfont-size:small;color:black;font-family:consolas, \"Courier New\", courier, monospace;background-color:#ffffff;}\n.csharpcode pre {margin:0em;}\n.csharpcode .rem {color:#008000;}\n.csharpcode .kwrd {color:#0000ff;}\n.csharpcode .str {color:#006080;}\n.csharpcode .op {color:#0000c0;}\n.csharpcode .preproc {color:#cc6633;}\n.csharpcode .asp {background-color:#ffff00;}\n.csharpcode .html {color:#800000;}\n.csharpcode .attr {color:#ff0000;}\n.csharpcode .alt \n{\nbackground-color:#f4f4f4;width:100%;margin:0em;}\n.csharpcode .lnum {color:#606060;}<\/style>","link":"http:\/\/davidsandor.com\/post\/2012\/12\/03\/SOLVED-Windows-Phone-8-WP8-The-await-operator-can-only-be-used-within-an-async-method.aspx","comments":"http:\/\/davidsandor.com\/post\/2012\/12\/03\/SOLVED-Windows-Phone-8-WP8-The-await-operator-can-only-be-used-within-an-async-method.aspx#comment","guid":"http:\/\/davidsandor.com\/post.aspx?id=74579b2b-4bd8-48f8-8c85-22a5e49291a7","pubDate":"Mon, 03 Dec 2012 08:16:39 -0800","category":["Windows Phone 8",".NET 4.5","Visual Studio 2012","Programming","C#"],"dc:publisher":"admin","pingback:server":"http:\/\/davidsandor.com\/pingback.axd","pingback:target":"http:\/\/davidsandor.com\/post.aspx?id=74579b2b-4bd8-48f8-8c85-22a5e49291a7","slash:comments":"79","trackback:ping":"http:\/\/davidsandor.com\/trackback.axd?id=74579b2b-4bd8-48f8-8c85-22a5e49291a7","wfw:comment":"http:\/\/davidsandor.com\/post\/2012\/12\/03\/SOLVED-Windows-Phone-8-WP8-The-await-operator-can-only-be-used-within-an-async-method.aspx#comment","wfw:commentRss":"http:\/\/davidsandor.com\/syndication.axd?post=74579b2b-4bd8-48f8-8c85-22a5e49291a7","y:published":{"hour":"16","timezone":"UTC","second":"39","month":"12","month_name":"December","minute":"16","utime":"1354551399","day":"3","day_ordinal_suffix":"rd","day_of_week":"1","day_name":"Monday","year":"2012"},"y:id":{"permalink":"false","value":"http:\/\/davidsandor.com\/post.aspx?id=74579b2b-4bd8-48f8-8c85-22a5e49291a7"},"y:title":"SOLVED: Windows Phone 8, WP8 - The 'await' operator can only be used within an async method."},{"title":"SOLVED: Trouble with WebGet and JSON with .NET 4.0 WCF Services","description":"<style type=\"text\/css\">\n\n.csharpcode, .csharpcode pre\n{\nfont-size:small;color:black;font-family:consolas, \"Courier New\", courier, monospace;background-color:#ffffff;}\n.csharpcode pre {margin:0em;}\n.csharpcode .rem {color:#008000;}\n.csharpcode .kwrd {color:#0000ff;}\n.csharpcode .str {color:#006080;}\n.csharpcode .op {color:#0000c0;}\n.csharpcode .preproc {color:#cc6633;}\n.csharpcode .asp {background-color:#ffff00;}\n.csharpcode .html {color:#800000;}\n.csharpcode .attr {color:#ff0000;}\n.csharpcode .alt \n{\nbackground-color:#f4f4f4;width:100%;margin:0em;}\n.csharpcode .lnum {color:#606060;}<\/style><p>This problem has been solved and answered many different ways but none of the answers seem to propose a complete basic or step by step solution.&#160; This article is my attempt to consolidate the answer into one concise how to article.<\/p>  <p><strong>Executive Summary<\/strong><\/p>  <p>For those of you that want the answers quickly, here are the steps necessary to properly use WebGet methods in a WCF Service:<\/p>  <ol>   <li>Use the WebGet attribute and specify a UriTemplate. <\/li>    <li>Use the webBinding binding type in your web.config. <\/li>    <li>Create an endpoint behavior that specifies webHttp in your web.config. <\/li>    <li>Reference the endpoint behavior in the service endpoint configuration section. <\/li>    <li>Set the binding in the service endpoint configuration to webHttpBinding (or to the name of the binding configuration that specifies webHttpBinding). <\/li> <\/ol>  <p><strong>How-To \/ Step by Step<\/strong><\/p>  <p>In this section we will go through the process of creating a simple service with Visual Studio 2010 that performs a simple WebGet operation.<\/p>  <p>Create a new <strong>WCF Service Application<\/strong> project.<\/p>  <p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_145.png\"><img style=\"background-image:none;border-right-width:0px;padding-left:0px;padding-right:0px;display:inline;border-top-width:0px;border-bottom-width:0px;border-left-width:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_145.png\" width=\"626\" height=\"409\"\/><\/a><\/p>  <p>I am going to leave the default Service1 class and interface names intact for simplicity.<\/p>  <p>Open the <strong>IService1.cs <\/strong>code file and change it so that it looks like this:<\/p>  <pre class=\"csharpcode\"><span class=\"kwrd\">using<\/span> System;\n<span class=\"kwrd\">using<\/span> System.Collections.Generic;\n<span class=\"kwrd\">using<\/span> System.Linq;\n<span class=\"kwrd\">using<\/span> System.Runtime.Serialization;\n<span class=\"kwrd\">using<\/span> System.ServiceModel;\n<span class=\"kwrd\">using<\/span> System.ServiceModel.Web;\n<span class=\"kwrd\">using<\/span> System.Text;\n\n<span class=\"kwrd\">namespace<\/span> WebGetTest\n{\n    [ServiceContract]\n    <span class=\"kwrd\">public<\/span> <span class=\"kwrd\">interface<\/span> IService1\n    {\n        [WebGet(UriTemplate=<span class=\"str\">\"\/add\/{a}\/{b}\"<\/span>)]\n        [OperationContract]\n        <span class=\"kwrd\">string<\/span> AddNumbers(<span class=\"kwrd\">string <\/span>a, <span class=\"kwrd\">string <\/span>b);\n    }\n}<\/pre>\n\n<p>Note the <strong>WebGet<\/strong> attribute in the interface definition.&#160; Now we are going to modify the<strong> Service1.cs<\/strong> file to implement the <strong>AddNumbers<\/strong> method.<\/p>\n\n<pre class=\"csharpcode\"><span class=\"kwrd\">public<\/span> <span class=\"kwrd\">class<\/span> Service1 : IService1\n{\n    <span class=\"kwrd\">public<\/span> <span class=\"kwrd\">string<\/span> AddNumbers(<span class=\"kwrd\">string<\/span> a, <span class=\"kwrd\">string<\/span> b)\n    {\n        <span class=\"kwrd\">int<\/span> firstInt, secondInt;\n\n        <span class=\"kwrd\">int<\/span>.TryParse(a, <span class=\"kwrd\">out<\/span> firstInt);\n        <span class=\"kwrd\">int<\/span>.TryParse(b, <span class=\"kwrd\">out<\/span> secondInt);\n\n        <span class=\"kwrd\">return<\/span> <span class=\"kwrd\">string<\/span>.Format(<span class=\"str\">\"{0} + {1} = {2}\"<\/span>, \n            firstInt, secondInt, firstInt + secondInt);\n    }\n}<\/pre>\n\n<p>This implements the method. <\/p>\n\n<p>Compile the project and make sure it builds. Next we are going to update the web.config file so this actually works.<\/p>\n\n<p>In Visual Studio click <strong>Tools<\/strong> | <strong>WCF Service Configuration Editor<\/strong>, Load the web.config file for this new project.<\/p>\n\n<p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_146.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_146.png\" width=\"644\" height=\"466\"\/><\/a><\/p>\n\n<p>You will see the WCF Config Editor.<\/p>\n\n<p> Now we are going to create a <strong>Service Endpoint<\/strong> and an <strong>Endpoint Behavior<\/strong>.<\/p>\n\n<p>Click the <strong>Services<\/strong> configuration node and click <strong>Create a New Service<\/strong>.<\/p>\n\n<p>Click <strong>Browse<\/strong> to find the service type.&#160; You are going to navigate to the DLL that implements your WCF service (hint, it should be in your \/bin folder).<\/p>\n\n<p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_147.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_147.png\" width=\"631\" height=\"496\"\/><\/a><\/p>\n\n<p>After clicking <strong>Open<\/strong> you will be allowed to choose the class that implements your service.&#160; Click it and then click <strong>Open<\/strong>.<\/p>\n\n<p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_148.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_148.png\" width=\"638\" height=\"437\"\/><\/a><\/p>\n\n<p>After clicking Open you will click <strong>Next<\/strong>.&#160; This will bring you to the service contract screen.&#160; This screen is asking you what the interface is that describes your service.&#160; Typically this will be automatically detected and filled out for you.<\/p>\n\n<p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_149.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_149.png\" width=\"544\" height=\"447\"\/><\/a><\/p>\n\n<p>Click <strong>Next<\/strong>.<\/p>\n\n<p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_150.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_150.png\" width=\"539\" height=\"445\"\/><\/a><\/p>\n\n<p>Choose <strong>HTTP<\/strong> and click <strong>Next<\/strong>.<\/p>\n\n<p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_151.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_151.png\" width=\"543\" height=\"444\"\/><\/a><\/p>\n\n<p>Choose <strong>Basic Web Services interoperability<\/strong> and click <strong>Next<\/strong>.<\/p>\n\n<p>For the <strong>Endpoint Address<\/strong> enter <strong>\/<\/strong> and click <strong>Next<\/strong> then on the summary page click <strong>Finish<\/strong>.<\/p>\n\n<p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_152.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_152.png\" width=\"544\" height=\"452\"\/><\/a><\/p>\n\n<p>You will now have a service configured in your Web.config file.<\/p>\n\n<p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_153.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_153.png\" width=\"557\" height=\"400\"\/><\/a><\/p>\n\n<p>Now we will create an endpoint behavior.&#160; Expand <strong>Advanced<\/strong>, <strong>Right Click<\/strong> on <strong>Endpoint Behaviors<\/strong> and choose <strong>New Endpoint Behavior<\/strong>.<\/p>\n\n<p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_154.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_154.png\" width=\"569\" height=\"414\"\/><\/a><\/p>\n\n<p>Click <strong>Add<\/strong>, Choose <strong>webHttp<\/strong> and click <strong>Add<\/strong>.<\/p>\n\n<p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_155.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_155.png\" width=\"382\" height=\"436\"\/><\/a><\/p>\n\n<p>The new behavior configuration screen will now look like this:<\/p>\n\n<p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_156.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_156.png\" width=\"544\" height=\"393\"\/><\/a><\/p>\n\n<p>Change the Binding to <strong>webHttpBinding<\/strong> and select the <strong>NewBehavior0<\/strong> behavior configuration.<\/p>\n\n<p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_157.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_157.png\" width=\"562\" height=\"406\"\/><\/a><\/p>\n\n<p>Click <strong>Save<\/strong> and exit from the WCF Service Configuration tool.<\/p>\n\n<p>Now you should be able to start your WCP project and navigate to the web method in your browser and see a result like below.<\/p>\n\n<p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_158.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_158.png\" width=\"666\" height=\"161\"\/><\/a><\/p>\n\n<p>Note that the URL contains your .svc file and then the <strong>UriTemplate<\/strong> property of the <strong>WebGet<\/strong> attribute kicks in.&#160; <\/p>\n\n<div style=\"padding-bottom:0px;margin:0px;padding-left:0px;padding-right:0px;display:inline;float:none;padding-top:0px;\" id=\"scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:45e81808-b09e-44e7-a13a-3e4bd5ef1ad6\" class=\"wlWriterEditableSmartContent\"><p><div>Source code for this project: <a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/file.axd?file=WebGetTest_1.zip\">WebGetTest.zip<\/a><\/div><\/div>","link":"http:\/\/davidsandor.com\/post\/2012\/07\/21\/SOLVED-Trouble-with-WebGet-and-JSON-with-NET-40-WCF-Services.aspx","comments":"http:\/\/davidsandor.com\/post\/2012\/07\/21\/SOLVED-Trouble-with-WebGet-and-JSON-with-NET-40-WCF-Services.aspx#comment","guid":"http:\/\/davidsandor.com\/post.aspx?id=29e43776-5ff6-4655-93f6-060df81fa665","pubDate":"Sat, 21 Jul 2012 15:27:45 -0800","category":["WCF","C#","Visual Studio 2010","Programming"],"dc:publisher":"admin","pingback:server":"http:\/\/davidsandor.com\/pingback.axd","pingback:target":"http:\/\/davidsandor.com\/post.aspx?id=29e43776-5ff6-4655-93f6-060df81fa665","slash:comments":"195","trackback:ping":"http:\/\/davidsandor.com\/trackback.axd?id=29e43776-5ff6-4655-93f6-060df81fa665","wfw:comment":"http:\/\/davidsandor.com\/post\/2012\/07\/21\/SOLVED-Trouble-with-WebGet-and-JSON-with-NET-40-WCF-Services.aspx#comment","wfw:commentRss":"http:\/\/davidsandor.com\/syndication.axd?post=29e43776-5ff6-4655-93f6-060df81fa665","y:published":{"hour":"23","timezone":"UTC","second":"45","month":"7","month_name":"July","minute":"27","utime":"1342913265","day":"21","day_ordinal_suffix":"st","day_of_week":"6","day_name":"Saturday","year":"2012"},"y:id":{"permalink":"false","value":"http:\/\/davidsandor.com\/post.aspx?id=29e43776-5ff6-4655-93f6-060df81fa665"},"y:title":"SOLVED: Trouble with WebGet and JSON with .NET 4.0 WCF Services"},{"title":"Visual Studio 2012 Look and Feel","description":"<p>My first impression so far has been \"Oh my Metro\".&#160; I am not sure if I like it yet.<\/p>  <p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_139.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_139.png\" width=\"580\" height=\"266\"\/><\/a><\/p>  <p>The menus are in all CAPS.&#160; WHY IS THE IDE YELLING AT ME? <\/p>  <p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_140.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_140.png\" width=\"356\" height=\"367\"\/><\/a><\/p>  <p>The color scheme is a bit washed out.&#160; I am still trying to get used to this but it does telegraph to the code and designer as they are where your eyes go.&#160; I could get in to this high contrast look if it were to splash color at the portion of the UI I were currently using.<\/p>  <p>WPF Control \/ Element selection works well and very fast.<\/p>  <p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_141.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_141.png\" width=\"546\" height=\"372\"\/><\/a><\/p>  <p>The UI is very responsive.&#160; If you remember Visual Studio 2008 (Ugh I still have to work in VS2008) clicking on a UI element in the designer renders properties in about a minute if you are lucky (and have ReSharper disabled).&#160; Visual Studio 2012's new IDE is very responsive.&#160; Thank you!<\/p>  <p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_142.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_142.png\" width=\"392\" height=\"418\"\/><\/a><\/p>    <p>Visual Studio 2012 adds <strong>List<\/strong> as an option for your DataSources if you are a drag and drop binding kinda guy.<\/p>  <p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_143.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_143.png\" width=\"195\" height=\"73\"\/><\/a><\/p>  <p>The XAML Designer has some Blend functionality built right in now.&#160; From the left: Zoom Level, Toggle Effects, Show Snap Grid,&#160; Snap to Grid Lines, Snap to Snaplines, Show Annotations.<\/p>  <p><strong>Toggle Effects<\/strong><\/p>  <p>This allows you to turn off the special effects bound to controls.&#160; This helps speed up the designer a great deal.<\/p>  <p><strong>Annotations<\/strong><\/p>  <p>Allows you to view annotations about your WPF application (presumably from a sketchflow annotation).<\/p>  <p><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_144.png\"><img style=\"background-image:none;border-bottom:0px;border-left:0px;padding-left:0px;padding-right:0px;display:inline;border-top:0px;border-right:0px;padding-top:0px;\" title=\"image\" border=\"0\" alt=\"image\" src=\"http:\/\/blog.davidsandor.com\/image.axd?picture=image_thumb_144.png\" width=\"347\" height=\"167\"\/><\/a><\/p>  <p>The Solution Explorer looks Metrofied and adds a really useful <strong>Collapse All<\/strong> command and a <strong>Pending Changes<\/strong> filter command.<\/p>","link":"http:\/\/davidsandor.com\/post\/2012\/06\/15\/Visual-Studio-2012-Look-and-Feel.aspx","comments":"http:\/\/davidsandor.com\/post\/2012\/06\/15\/Visual-Studio-2012-Look-and-Feel.aspx#comment","guid":"http:\/\/davidsandor.com\/post.aspx?id=e1508d25-aa4c-47ae-80fe-00c08881a88b","pubDate":"Fri, 15 Jun 2012 19:49:46 -0800","category":["WPF","Visual Studio","Programming","XAML","Visual Studio 2012"],"dc:publisher":"admin","pingback:server":"http:\/\/davidsandor.com\/pingback.axd","pingback:target":"http:\/\/davidsandor.com\/post.aspx?id=e1508d25-aa4c-47ae-80fe-00c08881a88b","slash:comments":"86","trackback:ping":"http:\/\/davidsandor.com\/trackback.axd?id=e1508d25-aa4c-47ae-80fe-00c08881a88b","wfw:comment":"http:\/\/davidsandor.com\/post\/2012\/06\/15\/Visual-Studio-2012-Look-and-Feel.aspx#comment","wfw:commentRss":"http:\/\/davidsandor.com\/syndication.axd?post=e1508d25-aa4c-47ae-80fe-00c08881a88b","y:published":{"hour":"3","timezone":"UTC","second":"46","month":"6","month_name":"June","minute":"49","utime":"1339818586","day":"16","day_ordinal_suffix":"th","day_of_week":"6","day_name":"Saturday","year":"2012"},"y:id":{"permalink":"false","value":"http:\/\/davidsandor.com\/post.aspx?id=e1508d25-aa4c-47ae-80fe-00c08881a88b"},"y:title":"Visual Studio 2012 Look and Feel"},{"title":"Finished the 4x4x4 LED Cube","description":"<div style=\"padding-bottom:0px;margin:0px;padding-left:0px;padding-right:0px;display:inline;float:none;padding-top:0px;\" id=\"scid:53357c8b-5919-4e32-8c25-305d27c17a37:91679409-a82a-4499-926b-3e417d11373e\" class=\"wlWriterEditableSmartContent\"><embed src=\"http:\/\/www.youtube.com\/v\/x15T_ywmEPM&feature=g-upl&rel=0\" type=\"application\/x-shockwave-flash\" width=\"425\" height=\"350\"><\/iframe>\n<br \/>\n<a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/www.youtube.com\/watch?v=x15T_ywmEPM&feature=g-upl\">4x4x4 LED Cube powered by Arduino\n      - YouTube<\/a><\/div>  <p>My previous post has a description and laundry list of parts I used.&#160; I wanted to learn how to use the 74HCT595 shift register chips.&#160; These chips are really cool because you can daisy chain them together and then simply shift bits of data into the DS serial input.&#160; The data will write out across all the chips in the chain and you only need three digital IO ports for any number of 595's in the chain.&#160; You just write out 8 bits of data for each chip.&#160; So if there are 4 595's chained together you write out 32 bits of data.&#160; <\/p>  <p>The 595's operate 8 active low output ports which means they are LOW when there is a (0) bit shifted in to the corresponding pin's register and HIGH (Vcc) when there is a (1).&#160; So 2 chips let me turn on the positive columns of the cube.<\/p>  <p>The MC74HC138A I used let me turn on and off the connectivity to the negative voltage.&#160; I only needed 4 of the 8 pins because I only have 4 horizontal rows of cathodes to switch.<\/p>  <p>The code attached to this only runs a test pattern that appears to turn on all the LED's in a layer and cycles to the next layer.&#160; I did this to catch some solder points that came undone.&#160; Next I am going to work on building some animations for the cube like rain, sinking letters, bouncing ball...etc.<\/p>  <p>Here is my parts list with prices:<\/p>  <p>2 X 74HC595 Shift Registers @ $0.20 each   <br \/>64 X Blue 5mm LED's @ $0.038 each    <br \/>16 X 470 Ohm resisters @ $0.01 each    <br \/>1 X MC74HC138A @ $0.29<\/p>  <p>So that was $0.88 in parts if you don't count the $29 Arduino.<\/p>  <p>Previous post:   <br \/><a rel=\"nofollow\" title=\"http:\/\/blog.davidsandor.com\/post\/2012\/04\/29\/Notes-on-4x4x4-Arduino-LED-Cube.aspx\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/post\/2012\/04\/29\/Notes-on-4x4x4-Arduino-LED-Cube.aspx\">http:\/\/blog.davidsandor.com\/post\/2012\/04\/29\/Notes-on-4x4x4-Arduino-LED-Cube.aspx<\/a><\/p>  <p>Arduino Code<\/p>  <div style=\"padding-bottom:0px;margin:0px;padding-left:0px;padding-right:0px;display:inline;float:none;padding-top:0px;\" id=\"scid:8eb9d37f-1541-4f29-b6f4-1eea890d4876:6c5b28cb-9992-4166-9b34-cd1054f9e007\" class=\"wlWriterEditableSmartContent\"><p><div><a rel=\"nofollow\" target=\"_blank\" href=\"http:\/\/blog.davidsandor.com\/file.axd?file=fourByCube.ino\">fourByCube.ino<\/a><\/div><\/div>  <div class=\"csharpcode\">   <pre class=\"alt\">&#160;<\/pre>\n\n  <pre>&#160;<\/pre>\n\n  <pre class=\"alt\"><span class=\"kwrd\">int<\/span> STPin = 2;<\/pre>\n\n  <pre><span class=\"kwrd\">int<\/span> SHPin = 3;<\/pre>\n\n  <pre class=\"alt\"><span class=\"kwrd\">int<\/span> DSPin = 4;<\/pre>\n\n  <pre>&#160;<\/pre>\n\n  <pre class=\"alt\"><span class=\"kwrd\">int<\/span> A0Pin = 8;<\/pre>\n\n  <pre><span class=\"kwrd\">int<\/span> A1Pin = 9;<\/pre>\n\n  <pre class=\"alt\"><span class=\"kwrd\">int<\/span> A2Pin = 10;<\/pre>\n\n  <pre>&#160;<\/pre>\n\n  <pre class=\"alt\"><span class=\"kwrd\">int<\/span> layers[4][3] = <\/pre>\n\n  <pre> {<\/pre>\n\n  <pre class=\"alt\">  { LOW, LOW, LOW },<\/pre>\n\n  <pre>  { HIGH, LOW, LOW },<\/pre>\n\n  <pre class=\"alt\">  { LOW, HIGH, LOW },<\/pre>\n\n  <pre>  { HIGH, HIGH, LOW }<\/pre>\n\n  <pre class=\"alt\"> };<\/pre>\n\n  <pre>&#160;<\/pre>\n\n  <pre class=\"alt\">&#160;<\/pre>\n\n  <pre><span class=\"kwrd\">void<\/span> setup()<\/pre>\n\n  <pre class=\"alt\">{<\/pre>\n\n  <pre> <\/pre>\n\n  <pre class=\"alt\">   pinMode(STPin, OUTPUT);<\/pre>\n\n  <pre>   pinMode(SHPin, OUTPUT);<\/pre>\n\n  <pre class=\"alt\">   pinMode(DSPin, OUTPUT);<\/pre>\n\n  <pre>&#160;<\/pre>\n\n  <pre class=\"alt\">   pinMode(A0Pin, OUTPUT);<\/pre>\n\n  <pre>   pinMode(A1Pin, OUTPUT);<\/pre>\n\n  <pre class=\"alt\">   pinMode(A2Pin, OUTPUT);<\/pre>\n\n  <pre>&#160;<\/pre>\n\n  <pre class=\"alt\">}<\/pre>\n\n  <pre>&#160;<\/pre>\n\n  <pre class=\"alt\"><span class=\"kwrd\">void<\/span> loop()<\/pre>\n\n  <pre>{<\/pre>\n\n  <pre class=\"alt\">  <span class=\"kwrd\">for<\/span>(<span class=\"kwrd\">int<\/span> cathodeLayer =0; cathodeLayer < 4; cathodeLayer++)<\/pre>\n\n  <pre>  {<\/pre>\n\n  <pre class=\"alt\">    setCathode(layers[cathodeLayer]);<\/pre>\n\n  <pre>    <span class=\"kwrd\">for<\/span>(<span class=\"kwrd\">int<\/span> i=0; i< 50; i++)<\/pre>\n\n  <pre class=\"alt\">    {<\/pre>\n\n  <pre>      pulseEachAnode(); <\/pre>\n\n  <pre class=\"alt\">    }<\/pre>\n\n  <pre>   }<\/pre>\n\n  <pre class=\"alt\">}<\/pre>\n\n  <pre>&#160;<\/pre>\n\n  <pre class=\"alt\"><span class=\"kwrd\">void<\/span> setCathode(<span class=\"kwrd\">int<\/span> bits[])<\/pre>\n\n  <pre>{<\/pre>\n\n  <pre class=\"alt\">  digitalWrite(A0Pin, bits[0]);<\/pre>\n\n  <pre>  digitalWrite(A1Pin, bits[1]);<\/pre>\n\n  <pre class=\"alt\">  digitalWrite(A2Pin, bits[2]);  <\/pre>\n\n  <pre>}<\/pre>\n\n  <pre class=\"alt\">&#160;<\/pre>\n\n  <pre><span class=\"kwrd\">void<\/span> pulseEachAnode()<\/pre>\n\n  <pre class=\"alt\">{<\/pre>\n\n  <pre>  <span class=\"kwrd\">for<\/span>(<span class=\"kwrd\">int<\/span> led=0; led < 16; led++)<\/pre>\n\n  <pre class=\"alt\">  {<\/pre>\n\n  <pre>    <span class=\"rem\">\/\/ Tell chip we are sending data.<\/span><\/pre>\n\n  <pre class=\"alt\">    digitalWrite(SHPin, LOW);<\/pre>\n\n  <pre>    digitalWrite(STPin, LOW);<\/pre>\n\n  <pre class=\"alt\">    <\/pre>\n\n  <pre>    <span class=\"kwrd\">for<\/span>(<span class=\"kwrd\">int<\/span> i=0; i < 16; i++)<\/pre>\n\n  <pre class=\"alt\">    {<\/pre>\n\n  <pre>       <span class=\"kwrd\">if<\/span> (led == i)<\/pre>\n\n  <pre class=\"alt\">       {<\/pre>\n\n  <pre>         digitalWrite(DSPin, HIGH);<\/pre>\n\n  <pre class=\"alt\">       }   <\/pre>\n\n  <pre>       <span class=\"kwrd\">else<\/span><\/pre>\n\n  <pre class=\"alt\">       {<\/pre>\n\n  <pre>         digitalWrite(DSPin, LOW); <\/pre>\n\n  <pre class=\"alt\">       }<\/pre>\n\n  <pre>       <\/pre>\n\n  <pre class=\"alt\">       <span class=\"rem\">\/\/ Tell chip we are through sending bits.<\/span><\/pre>\n\n  <pre>       digitalWrite(SHPin, HIGH);<\/pre>\n\n  <pre class=\"alt\">       digitalWrite(SHPin, LOW);<\/pre>\n\n  <pre>    }<\/pre>\n\n  <pre class=\"alt\">    <\/pre>\n\n  <pre>    <span class=\"rem\">\/\/ Latch.  Tell chip to move the data from the shift register stages (internal QnS) <br \/>    \/\/ to the storage register and parallel output stages<\/span><\/pre>\n\n  <pre class=\"alt\">    digitalWrite(STPin, HIGH);<\/pre>\n\n  <pre>  } <\/pre>\n\n  <pre class=\"alt\">}<\/pre>\n<\/div>\n<style type=\"text\/css\">\n.csharpcode, .csharpcode pre\n{\nfont-size:small;color:black;font-family:consolas, \"Courier New\", courier, monospace;background-color:#ffffff;}\n.csharpcode pre {margin:0em;}\n.csharpcode .rem {color:#008000;}\n.csharpcode .kwrd {color:#0000ff;}\n.csharpcode .str {color:#006080;}\n.csharpcode .op {color:#0000c0;}\n.csharpcode .preproc {color:#cc6633;}\n.csharpcode .asp {background-color:#ffff00;}\n.csharpcode .html {color:#800000;}\n.csharpcode .attr {color:#ff0000;}\n.csharpcode .alt \n{\nbackground-color:#f4f4f4;width:100%;margin:0em;}\n.csharpcode .lnum {color:#606060;}<\/style>","link":"http:\/\/davidsandor.com\/post\/2012\/05\/01\/Finished-the-4x4x4-LED-Cube.aspx","comments":"http:\/\/davidsandor.com\/post\/2012\/05\/01\/Finished-the-4x4x4-LED-Cube.aspx#comment","guid":"http:\/\/davidsandor.com\/post.aspx?id=505e1b0d-4eb0-45f4-8f14-989bdca468fb","pubDate":"Tue, 01 May 2012 19:10:33 -0800","category":["Programming","Embedded Development","Arduino"],"dc:publisher":"admin","pingback:server":"http:\/\/davidsandor.com\/pingback.axd","pingback:target":"http:\/\/davidsandor.com\/post.aspx?id=505e1b0d-4eb0-45f4-8f14-989bdca468fb","slash:comments":"42","trackback:ping":"http:\/\/davidsandor.com\/trackback.axd?id=505e1b0d-4eb0-45f4-8f14-989bdca468fb","wfw:comment":"http:\/\/davidsandor.com\/post\/2012\/05\/01\/Finished-the-4x4x4-LED-Cube.aspx#comment","wfw:commentRss":"http:\/\/davidsandor.com\/syndication.axd?post=505e1b0d-4eb0-45f4-8f14-989bdca468fb","y:published":{"hour":"3","timezone":"UTC","second":"33","month":"5","month_name":"May","minute":"10","utime":"1335928233","day":"2","day_ordinal_suffix":"nd","day_of_week":"3","day_name":"Wednesday","year":"2012"},"y:id":{"permalink":"false","value":"http:\/\/davidsandor.com\/post.aspx?id=505e1b0d-4eb0-45f4-8f14-989bdca468fb"},"y:title":"Finished the 4x4x4 LED Cube"}]}}
    ];

    $http.get('http://davidsandor.com/blogapi/api/Blog/GetRecentPosts?numberToFetch=5&truncateContent=false').success(function(data) {
        $scope.articles = data;
    });

    $scope.more = function(article)
    {
      alert(article.Title);
    };
*/
});

// Blog constructor function to encapsulate HTTP and pagination logic
blogApp.factory('Blog', function($http) {
    var Blog = function() {
        this.articles = [];
        this.busy = false;
        this.after = '';
    };

    Blog.prototype.nextPage = function() {
        if (this.busy) return;
        this.busy = true;

        var url = "http://davidsandor.com/blogapi/api/Blog/GetRecentPosts?numberToFetch=5&truncateContent=false&after=" + this.after + "&categoryId=" + $.QueryString["viewCategory"];
        //document.writeln("-=-=] " + url);

        $http.get(url).success(function(data) {
            //alert(data);
            var items = data;

            for (var i = 0; i < items.length; i++) {
                this.articles.push(data[i]);
                //document.writeln("-=-=] item: " + this.items[i]);
            }
            this.after = this.articles[this.articles.length - 1].Id;
            this.busy = false;
        }.bind(this));
    };

    return Blog;
});

blogApp.controller('BlogMainCtrl', function($scope, $http){
    /*
    $http.get('http://davidsandor.com/blogapi/api/Blog/GetRecentPosts?numberToFetch=5&truncateContent=false').success(function(data) {
        $scope.articles = data;
    });
    */
});

